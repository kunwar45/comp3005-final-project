-- Database: Final

-- DROP DATABASE IF EXISTS "Final";

CREATE DATABASE "Final"
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'English_Canada.1252'
    LC_CTYPE = 'English_Canada.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

-- Table creation for 'Employee'
CREATE TABLE employee (
    employee_id SERIAL PRIMARY KEY,
    name VARCHAR(255)
);
-- Table creation for 'Admin'
CREATE TABLE admin (
     employee_id INT PRIMARY KEY,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);

-- Table creation for 'Trainer'
CREATE TABLE trainer (
    employee_id INT PRIMARY KEY,
    available_time TIME,
    FOREIGN KEY (employee_id) REFERENCES employee(employee_id)
);
-- Table creation for 'Subscription'
CREATE TABLE subscription (
    subscription_id SERIAL PRIMARY KEY,
    tier_name VARCHAR(255),
    description TEXT,
    price NUMERIC(10, 2)
);
-- Table creation for 'Member' with foreign key to 'Subscription'
CREATE TABLE member (
    member_id SERIAL PRIMARY KEY,
    name VARCHAR(255)
    subscription_id INT, -- Assuming the foreign key field is named 'subscription_id'
    FOREIGN KEY (subscription_id) REFERENCES subscription(subscription_id)
);
CREATE TABLE goal (
    goal_id SERIAL PRIMARY KEY,
    member_id INT,
    description TEXT,
);
-- Table creation for 'Class'
CREATE TABLE class (
    class_id SERIAL PRIMARY KEY,
    time TIME,
    purpose TEXT,
    description TEXT,
    trainer_id INT,
    max_attendance INT, 
    current_num_attendees INT, 
    FOREIGN KEY (trainer_id) REFERENCES trainer(employee_id)
);

INSERT INTO class (time, purpose, description, trainer_id, max_attendance, current_num_attendees)
VALUES 
    ('09:00:00', 'Mobility', 'Yoga', 1, 20, 0), -- Class run by Sam Sulek (trainer_id = 1)
    ('16:00:00', 'Cardio', 'Afternoon Run', 3, 15, 0); -- Class run by Matt (trainer_id = 3)

CREATE TABLE takes (
    member_id INT,
    class_id INT,
    PRIMARY KEY (member_id, class_id),
    FOREIGN KEY (member_id) REFERENCES member(member_id),
    FOREIGN KEY (class_id) REFERENCES class(class_id)
);
-- Table creation for 'Room'
CREATE TABLE room (
    room_id SERIAL PRIMARY KEY,
    room_number INT,
    name TEXT,
    description TEXT
);
-- Table creation for 'Booking'
CREATE TABLE booking (
    booking_id SERIAL PRIMARY KEY,
    class_id INT,
    room_id INT,
    FOREIGN KEY (class_id) REFERENCES class(class_id),
    FOREIGN KEY (room_id) REFERENCES room(room_id)
);
